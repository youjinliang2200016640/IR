{"task_id": "HumanEval/0", "solution": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/6", "solution": "output = []\n    for s in paren_string.split():\n        count = 0\n        max_count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        output.append(max_count)\n    return output"}
{"task_id": "HumanEval/12", "solution": "if not strings:\n    return None\n\nlongest_string = strings[0]\nlongest_length = len(longest_string)\n\nfor string in strings:\n    if len(string) > longest_length:\n        longest_string = string\n        longest_length = len(string)\n\nreturn longest_string"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\nassert how_many_times('aaaaaaa', 'aa') == 3\nassert how_many_times('', 'a') == 0\nassert how_many_times('aaaa', 'aa') == 3\nassert how_many_times('ababababab', 'bab') == 3"}
{"task_id": "HumanEval/24", "solution": "sequence = []\nfor i in range(2, n):\n    if n % i == 0:\n        sequence.append(i)\nreturn max(sequence)"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    def digit_count(num: int, digit: int) -> int:\n        count = 0\n        while num > 0:\n            if num % 10 == digit:\n                count += 1\n            num = num // 10\n        return count\n    \n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += digit_count(i, 7)\n    return count\n\nprint(fizz_buzz(50))\nprint(fizz_buzz(78))\nprint(fizz_buzz(79))"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x+1 for x in l]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "solution": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n```\n\n\n```python\nimport doctest\ndoctest.testmod(verbose=True)\n```\n\n    Trying:\n        is_palindrome('')\n    Expecting:\n        True\n    ok\n    Trying:\n        is_palindrome('aba')\n    Expecting:\n        True\n    ok\n    Trying:\n        is_palindrome('aaaaa')\n    Expecting:\n        True\n    ok\n    Trying:\n        is_palindrome('zbcd')\n    Expecting:\n        False\n    ok\n    4 items had no tests:\n        __main__\n        __main__.Main\n        __main__.Main.is_palindrome\n        __main__.Main.is_palindrome.test\n    1 items passed all tests:\n       4 tests in __main__.Main.is_palindrome.test\n    4 tests in 5 items.\n    4 passed and 0 failed.\n    Test passed."}
{"task_id": "HumanEval/54", "solution": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\nprint(sum_to_n(30)) # 465\nprint(sum_to_n(100)) # 5050\nprint(sum_to_n(5)) # 15\nprint(sum_to_n(10)) # 55\nprint(sum_to_n(1)) # 1"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q,w):\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    primes = set('2357BDF')\n    return sum(char in primes for char in num)\n\nprint(hex_key('AB')) # 1\nprint(hex_key('1077E')) # 2\nprint(hex_key('ABED1A33')) # 4\nprint(hex_key('123456789ABCDEF0')) # 6\nprint(hex_key('2020')) # 2"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert to binary\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in binary)\n    # Convert to binary again\n    binary_sum_of_digits = bin(sum_of_digits)[2:]\n    # Return the result\n    return binary_sum_of_digits"}
{"task_id": "HumanEval/90", "solution": "Here is a Python solution to the problem:\n\n```python\ndef next_smallest(lst):\n    # Ensure list has at least two unique elements\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    # Sort the list in ascending order\n    lst.sort()\n    # Return the second element\n    return lst[1]\n```\n\nWe first check if the list contains at least two unique elements. If it does, we sort the list in ascending order and return the second element."}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef count_up_to(n):\n    counter = []\n    for i in range(2, n):\n        if is_prime(i):\n            counter.append(i)\n    return counter"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\nprint(choose_num(12, 15))\nprint(choose_num(13, 12))"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_digits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n = n // 10\n        return sum\n\n    result = 0\n    for i in arr:\n        if sum_digits(abs(i)) > 0:\n            result += 1\n    return result\n\nprint(count_nums([])) # 0\nprint(count_nums([-1, 11, -11])) # 1\nprint(count_nums([1, 1, 2])) # 3"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if len(nums) == 0:\n        return 0\n    result = nums[0]\n    for i in range(1, len(nums)):\n        result = min(result, nums[i], nums[i] + nums[i-1])\n    return result\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check for duplicates\n    if len(set(lst)) != len(lst):\n        return False\n    \n    # Check if list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True\n\n# Test cases\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) != 0\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "HumanEval/138", "solution": "    return n % 2 == 0 and n >= 8"}
{"task_id": "HumanEval/144", "solution": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef simplify(x, n):\n    return gcd(int(x.split('/')[0]), int(x.split('/')[1])) == 1 and \\\n    gcd(int(n.split('/')[0]), int(n.split('/')[1])) == 1"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x\n\nif __name__ == \"__main__\":\n    n = int(input())\n    x = int(input())\n    y = int(input())\n    print(x_or_y(n, x, y))"}
{"task_id": "HumanEval/156", "solution": "    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    result = ''\n    for i in range(len(numbers)):\n        while number >= numbers[i]:\n            number -= numbers[i]\n            result += symbols[i]\n\n    return result.lower()"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')"}
