{"task_id": "HumanEval/0", "solution": "\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j and abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "solution": "\n\n    paren_string = paren_string.strip()\n    return [x for x in paren_string.split(\")\") if x.startswith(\"(\")]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number):\n    return number - int(number)\n\n[/INST]\n"}
{"task_id": "HumanEval/3", "solution": "\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/4", "solution": "\n"}
{"task_id": "HumanEval/5", "solution": "\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + numbers[1:] + [delimeter] # 2\n    # return [numbers[0]] + [delimeter] * 2 + numbers[1:] + [delimeter] # 3\n    # return [numbers[0]] + [delimeter] * (len(numbers) - 1) + numbers[1:] + [delimeter] # 4\n    # return [numbers[0]] + [delimeter] * (len(numbers) - 2) + numbers[1:] + [delimeter] # 5\n"}
{"task_id": "HumanEval/6", "solution": "\n # Your code here:\n    split_list = paren_string.split()\n    new_list = []\n    for sublist in split_list:\n        n = len(sublist)\n        for i in range(n):\n            if sublist[i] == '(':\n                new_list.append(1)\n            elif sublist[i] == ')':\n                new_list[-1] += 1\n    for i in range(len(new_list)):\n        new_list[i] = max(new_list[i:], key=new_list[i:].count)\n    return new_list\n"}
{"task_id": "HumanEval/7", "solution": "\n"}
{"task_id": "HumanEval/8", "solution": "\n\n\ndef sum_product(numbers):\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    [/INST]\n\n    # your code here\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/9", "solution": "\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    [^]\n\n    [>]\n    # type: ignore\n    return [max(numbers[:i]) for i in range(len(numbers))]\n    [<]\n\n    [!]\n\n\n# ---\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    [^]\n\n    [>]\n    rolling_max = []\n    for i in range(len(numbers)):\n        max_num = max(numbers[:i])\n        if max_num != numbers[i]:\n            rolling_max.append(max_num)\n        else:\n            rolling_max.append(numbers[i])\n    [<]\n\n    [!]\n"}
{"task_id": "HumanEval/10", "solution": ""}
{"task_id": "HumanEval/11", "solution": "\n\n    pass\n\n\n#!/usr/bin/env python\n# coding=utf-8\n# @file: string_xor.py\n# @author: chenyihong\n# @date: 2021/6/11 16:09\n# @version: 1.0\n\n\nif __name__ == '__main__':\n    pass\n"}
{"task_id": "HumanEval/12", "solution": "\n"}
{"task_id": "HumanEval/13", "solution": "\n\n# Your code here\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/14", "solution": "\n\n\n\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        # pylint: disable=unsubscriptable-object\n        prefixes.append(string[:i])\n    return prefixes\n\n\n# Tests\n\ntests = [\n    ('abc', ['a', 'ab', 'abc']),\n    ('ab', ['a', 'ab']),\n    ('', []),\n    ('123', ['1', '12', '123']),\n    ('1', ['1']),\n]\nfor test in tests:\n    print('Testing', test)\n    assert all_prefixes(test[0]) == test[1]\n"}
{"task_id": "HumanEval/15", "solution": "\n"}
{"task_id": "HumanEval/16", "solution": "\n\n    # Your code here\n    unique_chars = set()\n    for char in string:\n        unique_chars.add(char)\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "solution": "\n    pass\n"}
{"task_id": "HumanEval/18", "solution": "\n\n# Solution 1\n\ndef how_many_times_1(string: str, substring: str) -> int:\n    return len(string) - len(string.replace(substring, \"\"))\n\n# Solution 2\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    return sum(1 for _ in range(len(string) - len(substring) + 1) if substring in string[i:i+len(substring)])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/19", "solution": "\n\n\n__test__ = {\n    'test_1': {\n        'input': ('three one five'),\n        'expect': ('one three five')\n    },\n    'test_2': {\n        'input': ('one three five'),\n        'expect': ('one three five')\n    }\n}"}
{"task_id": "HumanEval/20", "solution": "\n\n"}
{"task_id": "HumanEval/21", "solution": "\n    min_ = min(numbers)\n    max_ = max(numbers)\n    return [(a - min_) / (max_ - min_) for a in numbers]\n\n\ndef rescale_to_unit_clamped(numbers: List[float]) -> List[float]:\n    \"\"\" rescale_to_unit but the output is clamped to the [0, 1] interval\n    >>> rescale_to_unit_clamped([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    res = rescale_to_unit(numbers)\n    for i, x in enumerate(res):\n        res[i] = max(0.0, min(1.0, x))\n    return res\n"}
{"task_id": "HumanEval/22", "solution": "\n"}
{"task_id": "HumanEval/23", "solution": "\n\n\ndef strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "solution": "\n\n"}
{"task_id": "HumanEval/25", "solution": "\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/26", "solution": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4], \"Easy\"\n    assert remove_duplicates([1, 2, 2, 1, 3, 3, 3, 4, 4, 5]) == [1, 2, 3, 4, 5], \"Hard\"\n    assert remove_duplicates([1]) == [1], \"One item\"\n    assert remove_duplicates([1, 1, 1]) == [1], \"One item\"\n"}
{"task_id": "HumanEval/27", "solution": "\n\n    string_format = \"\"\n    for letter in string:\n        if letter.islower():\n            letter = letter.upper()\n        if letter.isupper():\n            letter = letter.lower()\n        string_format += letter\n    return string_format\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(flip_case('Hello'))\n"}
{"task_id": "HumanEval/28", "solution": "\n"}
{"task_id": "HumanEval/29", "solution": "\n    return [string for string in strings if string.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "solution": "\n\nfrom math import ceil as c\n\nprint(\"is_prime(%d) = %s\" % (n, is_prime(n)))\n\n\n"}
{"task_id": "HumanEval/32", "solution": "\n"}
{"task_id": "HumanEval/33", "solution": "\n\n# You should only edit the code above this line\n\ndef sort_third(l: list):\n    return [l[i] for i in range(0, len(l), 3)]\n\n# You should not edit the code below this line\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/34", "solution": "\n"}
{"task_id": "HumanEval/35", "solution": "\n"}
{"task_id": "HumanEval/36", "solution": "\n\ndef main():\n    \"\"\"Test your function\"\"\"\n    from doctest import testmod\n    import os\n    os.chdir(os.path.dirname(__file__))\n    testmod()\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/37", "solution": "\n\n# Write your code here\n"}
{"task_id": "HumanEval/38", "solution": "\n"}
{"task_id": "HumanEval/39", "solution": "\nimport itertools\nfrom math import sqrt\n\ndef fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef is_prime(n):\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return True\n\ndef prime_fib(n):\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    for x in range(1, n):\n        if is_prime(fibonacci(n)) == True:\n            return fibonacci(n)\n    \n\n"}
{"task_id": "HumanEval/40", "solution": "\n\n# [TODO]\n\n# [BEGIN]\n# [END]\n"}
{"task_id": "HumanEval/41", "solution": "\n\n# Write your code here\nimport math\n\ndef main():\n    n = int(input())\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, n//i + 1):\n            ans += math.ceil(n / (i * j))\n    print(ans)\n\nmain()\n"}
{"task_id": "HumanEval/42", "solution": "\n\nl = [1, 2, 3]\nl2 = [None] * len(l)\n\nfor i in range(len(l)):\n    l2[i] = l[i] + 1\n    \nprint(l2)"}
{"task_id": "HumanEval/43", "solution": "\n\n# ______________________________________________________________________________\n\n# ______________________________________________________________________________\n"}
{"task_id": "HumanEval/44", "solution": "\n\n\ndef change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    \n    if base > 10:\n        raise ValueError(\"base > 10\")\n    elif base == 0:\n        raise ValueError(\"base == 0\")\n\n    result = \"\"\n    while x >= 0:\n        result += str(x % base)\n        x = x // base\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/45", "solution": "\n\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a*h/2\n\n\n# test\n\nassert triangle_area(3, 4) == 6.0\nassert triangle_area(2, 4) == 4.0\n\n"}
{"task_id": "HumanEval/46", "solution": "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def fib4(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n > 0 and n <= 3:\n            return n\n        # if n == 4:\n        #     return 0\n        # if n == 5:\n        #     return 4\n        # if n == 6:\n        #     return 8\n        # if n == 7:\n        #     return 14\n        arr = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            arr.append(arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4])\n        return arr[n]"}
{"task_id": "HumanEval/47", "solution": "\n\n\n# =======================\n# Tests\n# =======================\n\nimport unittest\n\nclass Tests(unittest.TestCase):\n\n    def test_median(self):\n        self.assertEqual(median([3, 1, 2, 4, 5]), 3)\n        self.assertEqual(median([-10, 4, 6, 1000, 10, 20]), 15.0)\n\nif __name__ == '__main__':\n    unittest.main()\n"}
{"task_id": "HumanEval/48", "solution": "\n"}
{"task_id": "HumanEval/49", "solution": "Cannot connect to the model llama-2-70b"}
{"task_id": "HumanEval/50", "solution": "\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "solution": "\n\n# [START SELF_CHECK]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# [END SELF_CHECK]\n"}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"\n    Returns True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # TODO: Fill in your function here\n[INST]\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for x in l:\n        if x > t:\n            return False\n    return True\n[/INST]\n\n# Test your code here\nif __name__ == \"__main__\":\n    print(below_threshold([1, 2, 4, 10], 100))\n    print(below_threshold([1, 20, 4, 10], 5))\n"}
{"task_id": "HumanEval/53", "solution": "\n"}
{"task_id": "HumanEval/54", "solution": "\n\n\ndef same_chars(s0: str, s1: str):\n    # TODO: implement same_chars\n    return\n\n\ndef main():\n    # TODO: implement main\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n[TEST(\n    \"\"\"\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\",\n    \"\"\"\n    python3 -m pydoc -p 8000\n    \"\"\",\n    \"\"\"\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\",\n    \"\"\n)]\n"}
{"task_id": "HumanEval/56", "solution": "\n\n# [TEST]\ntest_brackets = \">><>\"\n\n# >>> correct_bracketing(test_brackets)\n# False\n# >>> correct_bracketing(\"<<>\")\n# False\n# >>> correct_bracketing(\"<<<>>>\")\n# True\n# >>> correct_bracketing(\"<><\")\n# False\n# [/TEST]\n\n# [CODING]\n\n# [/CODING]\n\n# [CHECK]\n# >>> correct_bracketing(test_brackets)\n# False\n# >>> correct_bracketing(\"<<>\")\n# False\n# >>> correct_bracketing(\"<<<>>>\")\n# True\n# >>> correct_bracketing(\"<><\")\n# False\n# [/CHECK]\n"}
{"task_id": "HumanEval/57", "solution": "\n"}
{"task_id": "HumanEval/58", "solution": "\n\n# Your code here\n\n"}
{"task_id": "HumanEval/59", "solution": "\n\n [INST] \n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    assert n % 2 != 0\n    i = 3\n    while n > i * i:\n        if n % i == 0:\n            return i\n        i += 2\n    return i - 1\n\n[/INST]\n\n\ndef test_largest_prime_factor():\n    assert largest_prime_factor(25) == 5\n    assert largest_prime_factor(36) == 3\n    assert largest_prime_factor(40) == 5\n    assert largest_prime_factor(55) == 5\n    assert largest_prime_factor(60) == 2\n    assert largest_prime_factor(77) == 7\n    assert largest_prime_factor(91) == 7\n    assert largest_prime_factor(102) == 3\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(1000) == 5"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int) -> int:\n    return 0 if n <= 0 else n + sum_to_n(n - 1)\n\ndef main():\n    # Test sum_to_n\n    print(\"sum_to_n(100)=\", sum_to_n(100))\n    print(\"sum_to_n(10)=\", sum_to_n(10))\n    print(\"sum_to_n(5)=\", sum_to_n(5))\n    print(\"sum_to_n(30)=\", sum_to_n(30))\n    print(\"sum_to_n(1)=\", sum_to_n(1))\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    if len(brackets) == 0:\n        return False\n    elif len(brackets) == 1:\n        return brackets == \"(\" or brackets == \")\"\n    else:\n        return correct_bracketing(brackets[1:]) if brackets[0] == \"(\" else correct_bracketing(brackets[1:]) and correct_bracketing(brackets[0])\n\n[INST] \n# Tests\n# >>> correct_bracketing(\"\")\n# False\n# >>> correct_bracketing(\"(\")\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\n[/INST]\n\n\n"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if xs == []:\n        return []\n    if xs[0] == 0:\n        return []\n\n    return [x * xs[1] for x in xs]\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/63", "solution": "\n\n# [IMPL] \n\ndef fibfib(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n# [/IMPL]\n\n# [TEST] \n\nimport unittest\n\nclass Testing(unittest.TestCase):\n    def test_case_0(self):\n        self.assertEqual(fibfib(1), 0)\n    def test_case_1(self):\n        self.assertEqual(fibfib(5), 4)\n    def test_case_2(self):\n        self.assertEqual(fibfib(8), 24)\n\n# [/TEST]\n\n# [ALGO] \n\n# [/ALGO]\n"}
{"task_id": "HumanEval/64", "solution": "\n\n    from string import ascii_lowercase\n    vowels = ascii_lowercase\n    vowels.remove(\"y\")\n    vowels.append(\"y\")\n    vowels = set(vowels)\n    word = s.lower()\n    vowelsCount = 0\n    for ch in word:\n        if ch in vowels:\n            if ch == \"y\":\n                if word.endswith(ch):\n                    vowelsCount += 1\n            else:\n                vowelsCount += 1\n    return vowelsCount\n"}
{"task_id": "HumanEval/65", "solution": "\n\n# put your code here\n\n\n# end of your code\n\nif __name__ == \"__main__\":\n    import doctest\n    print(doctest.testmod()[0])\n"}
{"task_id": "HumanEval/66", "solution": "\n\n\n# [BEGIN_EXPL]\n# This is a rather simple problem.\n#\n# The solution is just to take the sum of all the uppercase letters' ASCII codes, which we can get\n# using the ord() function.\n#\n# Example:\n# digitSum(\"aBcDe\")\n# => ord('A') + ord('B') + ord('C') + ord('D') + ord('E')\n# => 65 + 66 + 67 + 68 + 69\n# => 335\n# [/BEGIN_EXPL]\n\n\n# [BEGIN_SOL]\ndef digitSum(s):\n    return sum([ord(c) for c in s if c.isupper()])\n# [END_SOL]\n"}
{"task_id": "HumanEval/67", "solution": "\n# [IMPLEMENT]\n # [/IMPLEMENT]\n\n# [INSTRUCTOR]\n# [/INSTRUCTOR]\n\n"}
{"task_id": "HumanEval/68", "solution": "\n\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, next, random):\n        self.val = val\n        self.next = next\n        self.random = random\n\nclass Solution:\n    def pluck(self, nodes):\n        \"\"\"\n        :type nodes: Node[]\n        :rtype: List[int]\n        \"\"\"\n"}
{"task_id": "HumanEval/69", "solution": "\n# [20:14] Begin\nfrom collections import Counter\n\ncounter = Counter(lst)\n\nreturn max(counter.items(), key=lambda x: x[1] >= x[0])[0] if max(counter.items(), key=lambda x: x[1] >= x[0])[1] >= max(counter.items(), key=lambda x: x[1] >= x[0])[0] else -1\n# [20:14] End\n"}
{"task_id": "HumanEval/70", "solution": "\n\n# Ensure all values are unique\nlst = list(set(lst))\nlst.sort()\n\n# Strange sorting\nfirst = lst[0]\nlst[0] = lst[-1]\nlst[-1] = first\n\n# Return the strange list\nreturn lst\n"}
{"task_id": "HumanEval/71", "solution": "\n\n# [IMPL] \ndef triangle_area(a, b, c):\n    if abs(a+b-c) >= c and abs(a+c-b) >= b and abs(b+c-a) >= a:\n        return (a + b + c) / 2.00\n    else:\n        return -1\n\n# [/IMPL]\n"}
{"task_id": "HumanEval/72", "solution": "\n\n# [SOLUTION] \n# Think about the 3 properties:\n# - is it balanced\n# - sum of the numbers is less than or equal the maximum possible weight\n\ndef will_it_fly(q, w):\n    # Check if it's balanced\n    if q == q[::-1]:\n        # Check if sum is less than maximum possible weight\n        if sum(q) <= w:\n            # It will fly\n            return True\n    # It won't fly \n    return False\n\n\n# [/SOLUTION]\n"}
{"task_id": "HumanEval/73", "solution": "\n\n# Write your code here!\n"}
{"task_id": "HumanEval/74", "solution": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/75", "solution": "\n\n# Add your code here!\n"}
{"task_id": "HumanEval/76", "solution": "\n\n # Write your code here\nx = int(input())\nn = int(input())\n\n# LINE 1: Don't remove this line\nprint(bool(x == n ** int(x / n)))\n# END LINE 1"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube1(a):\n    '''\n    Try to solve this problem using recursion.\n    '''\n    if a == 1:\n        return True\n    elif a == 0:\n        return True\n    elif a == -1:\n        return True\n    elif a % 1 == 0:\n        return iscube1(a//3)\n    else:\n        return False\n\ndef iscube2(a):\n    '''\n    Try to solve this problem using a loop.\n    '''\n    if a == 1:\n        return True\n    elif a == 0:\n        return True\n    elif a == -1:\n        return True\n    elif a % 1 == 0:\n        while a != 1:\n            a = a//3\n    else:\n        return False\n\n\n\nif __name__=='__main__':\n    from tools import run_tests\n    from tools import test_case\n    run_tests(iscube, test_case)\n    run_tests(iscube1, test_case)\n    run_tests(iscube2, test_case)\n\n    print('All tests passed')"}
{"task_id": "HumanEval/78", "solution": "Cannot connect to the model llama-2-70b"}
{"task_id": "HumanEval/79", "solution": "\n\n [INSTR]\n def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # 1. Modify the for loop to have the binary number as a string\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal / 2\n\n    # 2. Return the binary number with 'db' at the beginning and at the end\n    return \"db\" + binary + \"db\"\n [/INSTR]\n\n\n # Test your code\n\n decimal_to_binary(15)\n\n\n # Improve your code\n\n# 2. If you found a simpler way to write this function, remember to add comments to make\n# your code easier to understand.\n"}
{"task_id": "HumanEval/80", "solution": "\n# Write your code below\n\nif len(s) >=3 and len(set(s[i:i+3]))==3 for i in range(len(s)-2):\n    return True\nelse:\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/81", "solution": "Cannot connect to the model llama-2-70b"}
{"task_id": "HumanEval/82", "solution": "\n\n #student code here\n [TEST_CASES]\n string = 'Hello'\n true_\n string = 'abcdcba'\n true_\n string = 'kittens'\n true_\n string = 'orange'\n false_\n [/TEST_CASES]\n\n [CHECK]\n def check(candidate):\n     # Check that the candidate function is defined\n     assert candidate, 'Did you define a candidate function?'\n     # Check that the function is a function\n     assert callable(candidate), 'Did you return a function?'\n     # Check that the function works for some test cases\n     assert candidate('Hello') == true_, 'Test 1 failed'\n     assert candidate('abcdcba') == true_, 'Test 2 failed'\n     assert candidate('kittens') == true_, 'Test 3 failed'\n     assert candidate('orange') == false_, 'Test 4 failed'\n     # Was the function correct for all of the test cases?\n     return 'All tests passed!'\n [/CHECK]"}
{"task_id": "HumanEval/83", "solution": "\n\n# Write your code here\n \nfrom math import factorial\n\nn = 1000\nn = int(n)\n\nans = 0\n\nfor i in range(n):\n    #print(i)\n    if(i<10):\n        ans = ans+2\n    else:\n        ans = ans+2*factorial(len(str(i)))\n\nprint(ans)\n"}
{"task_id": "HumanEval/84", "solution": "\n\nfrom functools import reduce\n\ndef solve(N):\n    return reduce(lambda x, y: str(int(x) + int(y)), [bin(i)[2:].zfill(3) for i in [N//10**i % 2 for i in range(int(log(N)/log(2))) + 1]])\n\nN = 1000\nprint(solve(N))"}
{"task_id": "HumanEval/85", "solution": "\n\n# 1st attempt\n\n\n# def add(lst):\n#     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n#     \"\"\"\n#     l = 0\n#     for i in range(len(lst)):\n#         if lst[i] % 2 == 0:\n#             l += lst[i]\n#         if i % 2 != 0:\n#             continue\n#     return l\n\n# 2nd attempt\n\n# def add(lst):\n#     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n#     \"\"\"\n#     l = 0\n#     for i in range(len(lst)):\n#         if lst[i] % 2 == 0:\n#             l += lst[i]\n#         if i % 2 != 0:\n#             continue\n#     return l\n\n# 3rd attempt\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    lst.sort()\n    i = 1\n    l = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            l += lst[i]\n            i += 2\n        else:\n            i += 1\n    return l"}
{"task_id": "HumanEval/86", "solution": "\n\n# Write your code here\n\nfor i in range(len(s)):\n    s = list(s)\n    s[i] = ''.join(sorted(s[i]))\n    s = ''.join(s)\n    return s"}
{"task_id": "HumanEval/87", "solution": "\n\n# =>  This is a Direct solution with time complexity: O(n), space complexity: O(n)\n# Solutions with different time or space complexity are possible.\n\n\ndef get_row(lst, x):\n    found = []\n    for i in range(len(lst)):\n        if lst[i] is not None:\n            for j in reversed(range(len(lst[i]))):\n                if lst[i][j] == x:\n                    found.append((i, j))\n\n    found.sort(key=lambda x: x[0])\n    for i in range(len(found)):\n        found[i] = list(found[i])\n        found[i].sort(key=lambda x: x[1])\n\n    return found\n\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1))\n# [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 2))\n# [(0, 1), (1, 1), (1, 2), (2, 1), (2, 3)]\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 3))\n# [(0, 2), (1, 3), (2, 2)]\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 4))\n# [(0, 3), (2, 4)]\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 5))\n# [(0, 4), (0, 5), (1, 5), (2, 5)]\n\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 6))\n# [(1, 6), (2, 6)]\n\nprint(get_row([], 1))\n# []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))\n# [(2, 2)]\n"}
{"task_id": "HumanEval/88", "solution": "\n\n# Heading\n\n# Code\n\n# Output\n\n# Used Resources\n\n# Notes"}
{"task_id": "HumanEval/89", "solution": "\n\n#Declare a variable that will store the encrypted message\nencrypted_message = ''\n#Declare a variable that will store the encrypted letter\nencrypted_letter = ''\n#Convert the string message to a list\nmessage = list(s)\n\n#Iterate over the message list and find the encrypted letter for each letter\nfor letter in message:\n    if letter.isalpha():\n        #Use ord to find the ASCII value of the letter\n        ascii_letter = ord(letter)\n        #Find the encrypted letter\n        encrypted_letter = chr((ascii_letter + 2) % 26 + 97)\n        #Add that letter to the encrypted message\n        encrypted_message += encrypted_letter\n    else:\n        #If the letter is not in the alphabet add that letter to the encrypted message\n        encrypted_message += letter\n\n#Return the encrypted message\nreturn encrypted_message\n"}
{"task_id": "HumanEval/90", "solution": "\n\n# Write your code here (don't forget to call your function)\n\n\ndef next_smallest(lst):\n    return lst[1] if len(lst) > 1 else None\n\n\n\n\na = next_smallest([1, 2, 3, 4, 5])\nb = next_smallest([5, 1, 4, 3, 2])\nc = next_smallest([])\nd = next_smallest([1, 1])\n\n# Check your code\nassert a == 2\nassert b == 2\nassert c == None\nassert d == None\n"}
{"task_id": "HumanEval/91", "solution": "\n\n#Write your code here\n\n[INST] \n# Provide an example call and its output\n    print is_bored('I am bored.')\n[/INST]\n\n\n\n"}
{"task_id": "HumanEval/92", "solution": "\n\n# 1. your solution\n\n# 2. another, different solution\n"}
{"task_id": "HumanEval/93", "solution": "\n\n [HINT]\n \n The basic idea here is to loop through the message, and check if \n every letter is a vowel or not. \n Notice that you are not allowed to use built in functions. \n \n [/HINT] \n\n [HINT]\n \n You will need to decide what to do if you come across a character \n that is not a letter. \n \n [/HINT] \n\n [HINT]\n \n How will you check if a letter is a vowel or not? \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n\n [HINT]\n \n \n \n [/HINT] \n"}
{"task_id": "HumanEval/94", "solution": "\n\nimport math\n\nif __name__ == '__main__':\n    # your code here\n    print(max([i for i in lst if math.isprime(i)]))\n\n"}
{"task_id": "HumanEval/95", "solution": "\n\n# TESTS\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n[TEST]\ndef check_dict_case_test1():\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\n[/TEST]\n\n[TEST]\ndef check_dict_case_test2():\n    assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\n[/TEST]\n\n[TEST]\ndef check_dict_case_test3():\n    assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False\n[/TEST]\n\n[TEST]\ndef check_dict_case_test4():\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\n[/TEST]\n\n[TEST]\ndef check_dict_case_test5():\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True\n[/TEST]\n\n"}
{"task_id": "HumanEval/96", "solution": "\n\n#CODE\n    num_list = range(2, n+1)\n    res = []\n    for num in num_list:\n        if is_prime(num):\n            res.append(num)\n\n    return res\n#END-CODE\n\n#TESTS\nfor (n, expected_output) in [(5, [2, 3]), (11, [2, 3, 5, 7]), (0, []), (20, [2, 3, 5, 7, 11, 13, 17, 19]), (1, []), (18, [2, 3, 5, 7, 11, 13, 17])]:\n    print(\"count_up_to({}) should return {}\".format(n, expected_output))\n    assert count_up_to(n) == expected_output\n#END-TESTS\n"}
{"task_id": "HumanEval/97", "solution": "\n# Write your code here\nans= a * b\nans= str(ans)\nnum1= int(ans[-1])\nnum2= int(b[-1])\nresult= num1 * num2\nprint(result)\n\n\n"}
{"task_id": "HumanEval/98", "solution": "\n\n    # put your code here\n    num_upper = 0\n    for i, ch in enumerate(s):\n        if i % 2 == 0:\n            if ch.isupper() and ch in \"AEIOU\":\n                num_upper += 1\n    return num_upper\n    \n[/INST]\n\n"}
{"task_id": "HumanEval/99", "solution": "\n\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    #solution 1:\n    #print(abs(float(value) -int(float(value))))\n    #print(abs(float(value)+1 -int(float(value)+1)))\n    #return(int(float(value)) if abs(float(value) -int(float(value))) > abs(float(value)+1 -int(float(value)+1))) else int(float(value)+1))\n    #solution 2:\n    print(round(float(value),0))\n    return round(float(value),0)\n\nif __name__ == '__main__':\n    import doctest\n    print(doctest.testmod())\n"}
{"task_id": "HumanEval/100", "solution": "\n\ndef make_a_pile(n):\n    \"\"\"\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(2)\n    [2, 4, 6]\n    >>> make_a_pile(12)\n    [12, 15, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n    >>> make_a_pile(18)\n    [18, 21, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]\n    \"\"\"\n    assert n >= 1\n    pile = []\n    n = n if n % 2 else n - 1\n    pile.append(n)\n    while n:\n        if n % 2:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "solution": "\n\n# Below is a function that you can use to test your code.\ndef test_words_string(s):\n    \"\"\"\n    Tests the words_string function.\n    \"\"\"\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"\") == []\n    assert words_string(\" \") == []\n    assert words_string(\" one\") == [\"one\"]\n    assert words_string(\" one two\") == [\"one\", \"two\"]\n    assert words_string(\" one, two, three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one two, three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one two , three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one, two , three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one, two, three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one , two, three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one , two , three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\"one,two,three\") == [\"one\", \"two\", \"three\"]\n    assert words_string(\" one, two, three, four, five, six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\" one two three four five six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\" one,two,three,four,five,six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "solution": "\n\n# [TODO]\n\n    # Your code here\n\n# [TODO]\n\n# [CHECK]\nimport check_solution\n\ncheck_solution.check(choose_num)\n# [/CHECK]"}
{"task_id": "HumanEval/103", "solution": "\n\n# 1: Your code goes here\nif n > m: \n    print(\"-1\")\nelse: \n    print(bin(int(sum(range(n, m + 1)) / (m - n + 1))))\n    \n# 2: Another solution\n\n# 3: Yet another!\n\n# 4: Reflection\n# According to the tests, the following is possible:\n\"\"\"\nIf m is smaller than n, the program should return -1.\nIf the average is a fractional value, it should be rounded to the nearest integer.\nIf the integer is a fractional value, it should be converted to binary.\n\"\"\"\n"}
{"task_id": "HumanEval/104", "solution": "\n#------------------------------------------------------------------------------\n#  iterates over element of the list\n#  return if the element has even digit\n#  if not add it to the list\n#  sort the list at end\n#------------------------------------------------------------------------------\ndef unique_digits(x):\n    y = []\n    for a in x:\n        if not any(a % 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == 2 for b in str(a)):\n            y.append(a)\n    return sorted(y)"}
{"task_id": "HumanEval/105", "solution": "\n\n# [1] Your solution goes here\n# arr = [2, 1, 1, 4, 5, 8, 2, 3]\n# sorted_arr = sorted(arr)\n# rev_arr = sorted_arr[::-1]\n# return_arr = []\n# for elem in rev_arr:\n#     if 0 < elem < 10:\n#         return_arr.append(str(elem))\n\n\n\n# [2] Another solution, this one passes all test cases\n\n# [3] Another solution\n\n# [4] Another solution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/106", "solution": "\n\n\nimport math\n\n\n# @param {integer} n\n# @return {integer[]}\ndef f(n):\n    result = []\n    total = 0\n    for index in range(0, n):\n        if index % 2 == 0:\n            result.append(math.factorial(index))\n        else:\n            total += index\n            result.append(total)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/107", "solution": "\n__author__ = 'Rex'\n\n\nclass Solution(object):\n    def even_odd_palindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: tuple\n        \"\"\"\n        self.total = 0\n        def check(num):\n            self.total += (num % 2 == 0)\n\n        for num in xrange(1, n + 1):\n            check(num)\n            check(num * 10 + num)\n            check(num * 100 + num * 10 + num)\n            check(num * 1000 + num * 100 + num * 10 + num)\n        return (self.total / 2, self.total - self.total / 2)\n\n    def even_odd_palindrome_2(self, n):\n        self.total = 0\n\n        def check(num):\n            if num >= 10000:\n                return\n            self.total += num % 2 == 0\n            check(num * 10 + num)\n            check(num * 100 + num * 10 + num)\n            check(num * 1000 + num * 100 + num * 10 + num)\n\n        check(1)\n        return (self.total // 2, self.total - self.total // 2)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.even_odd_palindrome(12)\n    print s.even_odd_palindrome_2(12)\n"}
{"task_id": "HumanEval/108", "solution": "\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_nums' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY arr\n#\n\ndef count_nums(arr):\n    return sum(1 for x in arr if sum(math.copysign(1, y) for y in x) > 0)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        arr = list(map(int, input().rstrip().split()))\n\n        result = count_nums(arr)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n"}
{"task_id": "HumanEval/109", "solution": "\n\n#Write your code here\n\nfrom itertools import permutations\n\ndef move_one_ball(arr: list) -> bool:\n    def is_sorted(nums: list) -> bool:\n        for i in range(0, len(nums) - 1):\n            if nums[i] < nums[i + 1]:\n                return False\n        return True\n    return any(is_sorted(arr[i:]) for i in range(len(arr)))\n\n#Tests\nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\nprint(move_one_ball([1, 2, 3, 4, 5]))\n"}
{"task_id": "HumanEval/110", "solution": "\n\n### My code\n#first thing i will do is to check that lst1 is not even\n#if lst1 is not even return \"NO\"\n#if lst1 is even then lst1 and lst2 have same number of elements \n#it means that lst2 can cover for lst1\n#then it will check if lst2 has the same number of odd and even elements\n#if they are the same then return \"YES\"\n#otherwise \"NO\"\n\ndef exchange(lst1, lst2):\n    if not all(i % 2 == 0 for i in lst1):\n        return \"NO\"\n    count = 0\n    if len(lst1) == len(lst2):\n        for i in lst1:\n            if i % 2 != 0:\n                count += 1\n        if len(lst2) % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "solution": "\n\n## BEGIN CODE HERE\nimport collections\n\na=test.split()\nb=collections.Counter(a)\nc=b.most_common(1)\nd={}\nif c:\n  for k,v in c:\n    d[k]=v\n    print(d)\n\n## END CODE HERE\n"}
{"task_id": "HumanEval/112", "solution": "\nimport re\ndef reverse_delete(s,c):\n    secondstr=[]\n    for x in range(len(s)):\n        if s[x] not in c:\n            secondstr.append(s[x])\n\n    resultstr=secondstr[len(secondstr)-1:0:-1]\n    if resultstr==s:\n        return resultstr,True\n    else:\n        return resultstr,False\n\nprint(reverse_delete(\"abcde\",\"ae\"))\nprint(reverse_delete(\"abcdef\",\"b\"))\nprint(reverse_delete(\"abcdedcba\",\"ab\"))\n"}
{"task_id": "HumanEval/113", "solution": "\n\n    out = []\n    for s in lst:\n        out.append(\"the number of odd elements \" + str(s.count(\"1\") + s.count(\"3\") + s.count(\"5\") + s.count(\"7\") + s.count(\"9\")) + \"n the str\" + str(s.count(\"0\") + s.count(\"1\") + s.count(\"2\") + s.count(\"3\") + s.count(\"4\") + s.count(\"5\") + s.count(\"6\") + s.count(\"7\") + s.count(\"8\") + s.count(\"9\")) + \"ng \" + s + \" of the \" + str(s.count(\"0\") + s.count(\"1\") + s.count(\"2\") + s.count(\"3\") + s.count(\"4\") + s.count(\"5\") + s.count(\"6\") + s.count(\"7\") + s.count(\"8\") + s.count(\"9\")) + \"nput.\")\n    return out\n"}
{"task_id": "HumanEval/114", "solution": "\n\n## @param A list of integers\n## @return An integer\n## @example input:[2, 3, 4, 1, 2, 4]\n## @example output:1\n## @example input:[-1, -2, -3]\n## @example output:-6\ndef minSubArraySum(nums):\n    l = len(nums)\n    # initialize start, end, and sum\n    start, end, sum = 0, 0, float(\"inf\")\n    # do a sliding window to find the window with the smallest sum\n    for i in xrange(l):\n        sum += nums[i]\n        # update the start of the window\n        while sum < 0:\n            sum -= nums[start]\n            start += 1\n        # update the end of the window\n        while i - start + 1 > 0 and sum > 0:\n            end += 1\n            sum -= nums[end - 1]\n        # find the smallest window\n        if i - start + 1 < 0 or sum < 0:\n            continue\n        if end - start < 0 or sum < 0:\n            continue\n        if sum < 0:\n            continue\n        if end - start < sum:\n            start, end, sum = i, i + 1, sum\n    return sum\n"}
{"task_id": "HumanEval/115", "solution": "\n    # Implement the algorithm\n    #\n    # Return:\n    #     Integer\n\n    # Solution:\n    #\n    #\n    #\n    # Code:\n    #\n    #\n    #\n\n\n    # Tests:\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"[0,0,1,0], [0,1,0,0], [1,1,1,1] : 1\"\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"[0,0,1,1] : 2\"\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"[0,0,0] : 5\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"}
{"task_id": "HumanEval/116", "solution": "\n\n#!/usr/bin/python\n\n# -*- coding: UTF-8 -*-\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sort_array function below.\ndef sort_array(arr):\n    return sorted(arr)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(raw_input().strip())\n\n    arr = []\n\n    for _ in xrange(arr_count):\n        arr_item = int(raw_input().strip())\n        arr.append(arr_item)\n\n    result = sort_array(arr)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n"}
{"task_id": "HumanEval/117", "solution": "\n\n# [SOL] \ndef select_words(s, n):\n    return [w for w in s.split() if len(set(w) & set(string.ascii_consonants)) == n]\n[/SOL]\n\n# [TEST] \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n[/TEST]\n"}
{"task_id": "HumanEval/118", "solution": "\n\n# TEST CASES\n# ---------\n\n# Test 1\nassert get_closest_vowel('yogurt') == 'u'\n\n# Test 2\nassert get_closest_vowel('full') == 'U'\n\n# Test 3\nassert get_closest_vowel('quick') == ''\n\n# Test 4\nassert get_closest_vowel('ab') == ''\n\n# Test 5\nassert get_closest_vowel('abc') == ''\n\n# Test 6\nassert get_closest_vowel('abcdef') == 'e'\n\n# Test 7\nassert get_closest_vowel('abcdefghi') == 'e'\n\n# Test 8\nassert get_closest_vowel('abcdefghijklmnopqrstuvwxyz') == 'e'\n\n# Test 9\nassert get_closest_vowel('asdfghjkl') == 'e'\n\n# Test 10\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 11\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 12\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 13\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 14\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 15\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 16\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 17\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 18\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 19\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 20\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 21\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 22\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 23\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 24\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 25\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 26\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 27\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 28\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 29\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 30\nassert get_closest_vowel('asdfghjklzxcvbnm') == 'e'\n\n# Test 31\nassert get_closest_vowel('xdghkjzxcvbnm') == 'e'\n\n# Test 32\nassert get_closest_vowel('xdghkjzxcvbnm') == 'e'\n\n# Test 33\nassert get_closest_vowel('xdgjkzxcvbnm') == 'e'\n\n# Test 34\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 35\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 36\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 37\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 38\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 39\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 40\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 41\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 42\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 43\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 44\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 45\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 46\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 47\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 48\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 49\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n\n# Test 50\nassert get_closest_vowel('xdgjzxcvbnm') == 'e'\n"}
{"task_id": "HumanEval/119", "solution": "\n\nimport re\n\ndef match_parens(a, b):\n    if re.match(\"([()]+)\", ''.join([a, b])):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n"}
{"task_id": "HumanEval/120", "solution": "\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} k\n    # @return {ListNode}\n    def maximumList(self, head, k):\n        stack = []\n        temp = head\n        while temp:\n            stack.append(temp.val)\n            temp = temp.next\n        return self.mergeKLists(stack, k)\n\n    def mergeKLists(self, stack, k):\n        if len(stack) < k:\n            return None\n        head = ListNode(stack[0])\n        temp = head\n        for i in range(1, k):\n            temp.next = ListNode(stack[i])\n            temp = temp.next\n        temp.next = self.mergeKLists(stack[k:], len(stack) - k)\n        return head\n\n# Note:\n# Unfortunately, Stack is not allowed.\n# The problem can be solved in linear time (O(n)) with the help of a min-heap.\n# Dynamic programming also works.\n# The idea is to use two pointers (the left and right) to find the maximum k numbers from the beginning and the end of the list.\n# No point making the left pointer go beyond the right pointer.\n\n# 130ms 100%\n"}
{"task_id": "HumanEval/121", "solution": "\n# Write your solution here!\n"}
{"task_id": "HumanEval/122", "solution": "\n\n# [IMP]\nimport re\n\ndef add_elements(arr, k):\n    # Check if string can be converted to integer\n    reg = re.compile(r'[0-9]+')\n    if not reg.search(arr[k-1]):\n        return 0\n\n    # If yes, convert all array elements to integers\n    arr = [int(elem) for elem in arr]\n    return sum(arr[:k])\n\n# [/IMP]\n\n# [TEST]\n\n# TEST 1\n# arr = [111,21,3,4000,5,6,7,8,9]\n# k = 4\n# assert add_elements(arr, k) == 24\n\n\n# TEST 2\n# arr = [10,-5,-2,-10,3,1,2,3,4]\n# k = 7\n# assert add_elements(arr, k) == 5\n\n\n# TEST 3\n# arr = [10,-5,-2,-10,3,1,2,3,4]\n# k = 100\n# assert add_elements(arr, k) == 0\n\n# TEST 4\n# arr = [10,-5,-2,-10,3,1,2,3,4]\n# k = 0\n# assert add_elements(arr, k) == 0\n\n# TEST 5\n# arr = [10,-5,-2,-10,3,1,2,3,4]\n# k = 1\n# assert add_elements(arr, k) == 0\n\n# TEST 6\n# arr = [10,-5,-2,-10,3,1,2,3,4]\n# k = -1\n# assert add_elements(arr, k) == 0\n\n# TEST 7\n# arr = [1,2,3,4]\n# k = 4\n# assert add_elements(arr, k) == 10\n\n# TEST 8\n# arr = [1,2,3,4]\n# k = 5\n# assert add_elements(arr, k) == 0\n\n# TEST 9\n# arr = [\"1\", \"10000000000000000000000000000000000000000000000000000000000000\", \"1\"]\n# k = 2\n# assert add_elements(arr, k) == 0\n\n# TEST 10\n# arr = [111,21,3,4000,5,6,7,8,9]\n# k = 1\n# assert add_elements(arr, k) == 0\n\n# [/TEST]\n"}
{"task_id": "HumanEval/123", "solution": "\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def get_odd_collatz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        # if n == 1:\n        #     return [1]\n        # else:\n        #     return [1] + self.get_odd_collatz(n // 2)\n        if n % 2 == 0:\n            return self.get_odd_collatz(n // 2)\n        else:\n            return [n] + self.get_odd_collatz(n // 2)\n"}
{"task_id": "HumanEval/124", "solution": "\n\n# [TODO]\n\n# [/TODO]\n\n\n\nimport calendar\n\n\n\n### [Solution]\n\n\n# [/Solution]\n\n# [Tests]\n\n\n# [/Tests]\n"}
{"task_id": "HumanEval/125", "solution": "\n\n#Your code goes here\n\n#Add your test cases here\n\n#These are the test cases to check that your code is correct. Uncomment each test case by removing the leading '.'\n\n#print(split_words(\"Hello world!\") == [\"Hello\", \"world!\"])\n#print(split_words(\"Hello, world!\") == [\"Hello\", \"world!\"])\n#print(split_words(\"abcdef\") == 3)\n"}
{"task_id": "HumanEval/126", "solution": "\n\n# Marcos's solution\ndef is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True\n\n# Another solution\ndef is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "solution": "\n\n\n\n[INSTRUCTIONS]\n\n\n1. For each exercise, ask the user to enter two pairs of integers.\n2. Print the result of the corresponding function (without the print statement)\n3. If the result is an error, print the error message\n4. You can assume that the input is valid and only two pairs of integers will be entered.\n\n[/INSTRUCTIONS]\n\n\n"}
{"task_id": "HumanEval/128", "solution": "\n\n# Here begin the tests.\nfrom tests import eq\n\ndef test_prod_signs():\n    \"\"\"\n    >>> from prod_signs import prod_signs\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    True\n    >>> prod_signs([0, 1]) == 0\n    True\n    >>> prod_signs([]) == None\n    True\n    \"\"\"\n\n    eq(prod_signs([1, 2, 2, -4]), -9)\n    eq(prod_signs([0, 1]), 0)\n    eq(prod_signs([]), None)\n\n# -- END OF LINE --\n"}
{"task_id": "HumanEval/129", "solution": "\n\n \n\n# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer[]}\ndef minPath(grid, k)\n  return dp(grid, k, 0)\nend\n\n\ndef dp(grid, k, i)\n  return [] if i==k\n  min = nil\n  grid.each_with_index do |row, x|\n    row.each_with_index do |val, y|\n      min = dp(grid, k, i+1)  \n      if !min || val < min[0]\n        min = [val]\n      end\n    end\n  end\n  return min\nend\n"}
{"task_id": "HumanEval/130", "solution": "\n\n# [HINT]\n# What is the relationship between tri(n) and tri(n + 1)?\n# What is the relationship between tri(n) and tri(n - 1)?\n# What is the relationship between tri(n) and tri(n - 2)?\n# Is it possible to express tri(n) in terms of tri(n - 1), tri(n - 2), and tri(n - 3)?\n# ______________________________________________________________________________\n\n# [2]\n\n# Your code here\n\n\n# [3]\n\n# This is the function to check your solution\ndef check(result):\n    \n    # Here you can check if your list is the same as the expected output\n    # Raise AssertionError if the lists are not the same\n    # Otherwise, return\n    \n    if not result == [1, 3, 2, 8]:\n        raise AssertionError\n\n    \n# This is the main function.\n# When you are done with your solution, please click the 'Check My Solution' button\n# You will see the test cases and the result of your solution.\n\nif __name__ == \"__main__\":\n    test_tri = tri(3)\n    check(test_tri)"}
{"task_id": "HumanEval/131", "solution": "\n\n###############################################################\n# Tests\n\n# These \"asserts\" are used for self-checking and not for an auto-testing\n# Use the command line to run the tests\n\ndef test_digits():\n    \"\"\"\n    Tests whether your solution to digits works.\n    \"\"\"\n\n    # These tests are incomplete.\n    assert digits(235) == 15\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(19) == 19\n    assert digits(999999999999999) == 0\n    assert digits(5) == 5\n    assert digits(100) == 100\n    assert digits(12345) == 15\n\n    # Add your own tests here\n\nif __name__ == \"__main__\":\n    test_digits()\n"}
{"task_id": "HumanEval/132", "solution": "\n\n\ndef is_nested(string):\n    i = 0\n    for j in range(len(string)):\n        if string[j] == '[':\n            i += 1\n        elif string[j] == ']':\n            i -= 1\n\n        if i < 0:\n            return True\n\n    return False\n\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n\n\n# my code\ndef is_nested(string):\n    i = 0\n    for j in string:\n        if j == '[':\n            i += 1\n        elif j == ']':\n            i -= 1\n\n        if i < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/133", "solution": "\n\n\n# [START]\ndef sum_squares(lst):\n    return sum([int(i**2) for i in lst])\n# [END]\n"}
{"task_id": "HumanEval/134", "solution": "\n# PSEUDOCODE\n# Input: str\n# Output: Boolean\n# Steps:\n# Create a function that inputs a string\n# Check if the last character of a given string is an alphabetical character and is not a part of a word\n# Return True if the last character of a given string is an alphabetical character and is not a part of a word\n# Return False otherwise\n# Initial Solution\n\n\n\n\n# Refactored Solution\n\n\n# Reflection\n# What concepts did you review or learn in this challenge?\n# I reviewed how to check if a character is a letter and how to check if a character is a white space.\n\n# What is still confusing to you about Python?\n# I still don't fully understand how to join strings together using the + operator.\n\n# What are you going to study to get more prepared for Phase 1?\n# I am going to study the use of the + operator in strings and lists. I will also study the different types of data in python."}
{"task_id": "HumanEval/135", "solution": "\npass\n# vim: set et sts=4 sw=4 ts=8:\n"}
{"task_id": "HumanEval/136", "solution": "\n\n# [START EXPLANATION]\n# [END EXPLANATION]\n\n# Tests go here:\n# [START TESTS]\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\nprint(largest_smallest_integers([1, 2, 3, 4, 5]))\nprint(largest_smallest_integers([-1, -2, -3, -4, -5]))\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]))\nprint(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7]))\n# [END TESTS]\n"}
{"task_id": "HumanEval/137", "solution": "\n\n# Tests\nassert compare_one(1, 2) == 2\nassert compare_one(2, 1) == 2\nassert compare_one(1.5, 1) == 1.5\nassert compare_one(1.5, 1.5) == None\nassert compare_one('1,2', 1.5) == 1.5\nassert compare_one('1,2', \"1.5\") == \"1.5\"\nassert compare_one(\"1.2\", 1.2) == None\n"}
{"task_id": "HumanEval/138", "solution": "\n\n# [START]\n# Your solution goes here\n\n# [/START]\n\n# [START]\n# Replace all 'assert' statements with actual code\n\n# [/START]"}
{"task_id": "HumanEval/139", "solution": "\n\n\n"}
{"task_id": "HumanEval/140", "solution": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n'''\nCreated on 2015-05-27\n\n@author: sharvey\n'''\n\ntext = str(input('Enter text to clean: '))\n\ntext = text.replace(' ', '_')\ntext = text.replace('  ', '-')\ntext = text.replace('   ', '-')\n\nprint(text)\n"}
{"task_id": "HumanEval/141", "solution": "\n\n# [HINT]\n# 1. You need to use the Python's string built-in functions:\n#    find (https://docs.python.org/3/library/stdtypes.html#str.find)\n#    isdigit (https://docs.python.org/3/library/stdtypes.html#str.isdigit)\n#    split (https://docs.python.org/3/library/stdtypes.html#str.split)\n# 2. If you're not familiar with regular expressions, don't worry about them for now.\n#    You can always come back to this exercise later!\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if a given string contains the\n# substring 'txt':\n#     'txt' in file_name # Return True if the substring 'txt' is in the string file_name\n#     file_name.find('txt') != -1 # Return True if the substring 'txt' is in the string file_name\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if a given string contains \n# the substring 'txt', and the substring 'txt' is at the end of the string:\n#     'txt' in file_name and file_name.rfind('txt') == len(file_name) - len('txt')\n#     file_name.find('txt') != -1 and file_name.rfind('txt') == len(file_name) - len('txt')\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if a string is a number:\n#     file_name.isdigit() # Return True if the string file_name is a number string, and Return False otherwise\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if all the characters \n# in the string are number characters:\n#     all(char.isdigit() for char in file_name) # Return True if all the characters in the string file_name are number characters, and Return False otherwise\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if all the characters \n# in the string are number characters, and there are more than 3 number characters:\n#     all(char.isdigit() for char in file_name) and len(file_name) > 3\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if the first character \n# of the string is a letter in the latin alphabet:\n#     file_name[0] in 'a' .. 'z' or file_name[0] in 'A' .. 'Z'\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if the first character \n# of the string is a letter in the latin alphabet, and the first character in the string \n# is not number:\n#     file_name[0] in 'a' .. 'z' or file_name[0] in 'A' .. 'Z' and file_name[0] not in '0' .. '9'\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if the first \n# substring before the dot in the string contains only letters:\n#     all(char in 'a' .. 'z' or char in 'A' .. 'Z' for char in file_name.split('.')[0])\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if the first \n# substring before the dot in the string contains only letters, and the substring \n# does not start with number:\n#     all(char in 'a' .. 'z' or char in 'A' .. 'Z' for char in file_name.split('.')[0]) and file_name.split('.')[0][0] not in '0' .. '9'\n# [/HINT]\n\n# [HINT]\n# In Python, you can use the following expressions to check if the substring after\n# the dot is one of the strings 'txt', 'exe', 'dll':\n#     file_name.split('.')[1] in ['txt', 'exe', 'dll']\n# [/HINT]\n\n# [HINT]\n# Combine all the conditions above to create the function.\n# [/HINT]\n\n\nimport re \ndef file_name_check(file_name):\n    if re.search(r\"^[a-zA-Z][A-Za-z]+(0-9)*$\", file_name):\n        return file_name \n    else:\n        return 'No'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i * i\n        elif i % 4 == 0:\n            result += i * i * i\n        else:\n            result += i\n    return result\n"}
{"task_id": "HumanEval/143", "solution": "\n\n [INST] \ndef main():\n    # Test 1\n    assert words_in_sentence(\"This is a test\") == \"is\"\n\n    # Test 2\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n[/INST]\n\n # Brute Force\n\n\n # My Solution\n\n\n # Solution\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/144", "solution": "\n\n# [TEST-DATA]\nsimplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")\n# [/TEST-DATA]\n\n# [HINT]\nSimplification is the process of removing all common factors from the numerator and denominator of a fraction.\nWhat are the common factors of a fraction?\nHow can you return True if x * n evaluates to a whole number?\n# [/HINT]\n\n# [ALGORITHM]\n# [/ALGORITHM]\n\n# [CODE]\n# [/CODE]\n\n# [OUTPUT]\n# [/OUTPUT]\n\n# [CHECK]\n# [/CHECK]\n\n# [CHECK-FN]\n# [/CHECK-FN]\n\n# [MAIN]\ndef main():\n    # [/MAIN]\n    pass\n\n# [STDIN]\n# [/STDIN]\n\n# [STDOUT]\n# [/STDOUT]\n\n# [STDERR]\n# [/STDERR]\n\n# [/CLOZE]\n"}
{"task_id": "HumanEval/145", "solution": "\n\nnums = map(int, raw_input().split())\nnums.sort(key=sum_digits)\nprint nums\n\ndef sum_digits(x):\n    return sum(int(d) for d in str(x))\n"}
{"task_id": "HumanEval/146", "solution": "\n"}
{"task_id": "HumanEval/147", "solution": "\n\n\\n\\n[CTAB]\n    a: int[]\n    n: int\n[/CTAB]\n\n[SOL]\n# [1, 3, 7, 13, 21]\n    // O(n^2) time | O(n) space\n    function get_max_triples(n):\n        a = [i*i-i+1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                for k in range(j, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n        return count\n[/SOL]\n\n[HINT]\n# Note that the numbers [1, 3, 7, 13, 21] are the sum of odd numbers in increasing order.\n# [1, 3, 7, 13, 21] = [1] + [3, 5] + [7, 9, 11] + [13, 15, 17, 19] + [21, 23, 25, 27, 29]\n# You can try to solve the problem if only one number is added at a time.\n[/HINT]\n"}
{"task_id": "HumanEval/148", "solution": "\n\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        return tuple(planets[index1 + 1 : index2])\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n\n"}
{"task_id": "HumanEval/149", "solution": "\n# [SEC=\"main\"]\n    def sorted_list_sum(lst):\n        lst = sorted(lst, key=len)\n        return lst\n        \n\n# [/SEC]\n# [SEC=\"sample tests\"]\n    for lst in [\n        [\"aa\", \"a\", \"aaa\"],\n        [\"ab\", \"a\", \"aaa\", \"cd\"],\n    ]:\n        assert sorted_list_sum(lst) == [\n            [\"aa\"],\n            [\"ab\", \"cd\"],\n        ]\n# [/SEC]\n\n# [SEC=\"final checks\"]\n    for lst in [\n        [\"aa\", \"a\", \"aaa\"],\n        [\"ab\", \"a\", \"aaa\", \"cd\"],\n    ]:\n        assert sorted_list_sum(lst) == [\n            [\"aa\"],\n            [\"ab\", \"cd\"],\n        ]\n# [/SEC]\n"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    return 5\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/151", "solution": "\nimport itertools\n\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    [/INST]\n    \n    if not lst:\n        return 0\n    \n    return sum([i * i for i in lst if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/152", "solution": "\n\n# Calculate the difference between each score and guess\ndiffs = [score - guess for score, guess in zip(game, guess)]\n\n# Return the absolute value of each difference\nreturn [abs(diff) for diff in diffs]\n"}
{"task_id": "HumanEval/153", "solution": "\n\n# [IMPL] \ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    return \"%s.%s\" % (class_name, max(extensions, key=lambda x: len(x.upper()) - len(x.lower())))\n\nif __name__ == '__main__':\n    import doctest\n    print doctest.testmod()[0]\n"}
{"task_id": "HumanEval/154", "solution": "\n\npass\n#Remove this line and write your code here\n\n"}
{"task_id": "HumanEval/155", "solution": "\n\n# Test code\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/156", "solution": "\n\n    if number <= 3:\n        return \"i\" * number\n    elif number == 4:\n        return \"iv\"\n    elif number == 5:\n        return \"v\"\n    elif number == 9:\n        return \"ix\"\n    elif number == 10:\n        return \"x\"\n    elif number == 40:\n        return \"xl\"\n    elif number == 50:\n        return \"l\"\n    elif number == 90:\n        return \"x\"\n    elif number == 100:\n        return \"c\"\n    elif number == 400:\n        return \"cd\"\n    elif number == 500:\n        return \"d\"\n    elif number == 900:\n        return \"cm\"\n    elif number == 1000:\n        return \"m\"\n    elif number > 3 and number < 9:\n        return \"i\" * (number - 1) + \"v\"\n    elif number > 5 and number < 10:\n        return \"v\" + \"i\" * (number - 6)\n    elif number > 9 and number < 40:\n        return \"x\" + \"i\" * (number - 10)\n    elif number > 40 and number < 50:\n        return \"x\" * (number - 41) + \"l\"\n    elif number > 50 and number < 90:\n        return \"l\" + \"i\" * (number - 51)\n    elif number > 90 and number < 100:\n        return \"c\" + \"i\" * (number - 91)\n    elif number > 100 and number < 400:\n        return \"c\" * (number - 101) + \"d\"\n    elif number > 400 and number < 500:\n        return \"c\" * (number - 401) + \"i\" + \"l\"\n    elif number > 500 and number < 900:\n        return \"d\" + \"i\" * (number - 501)\n    elif number > 900 and number < 1000:\n        return \"m\" + \"i\" * (number - 901)\n    else:\n        return \"m\" * (number - 901) + \"d\"\n\n\n"}
{"task_id": "HumanEval/157", "solution": "\n\n# Add your code here!\n#!/bin/python\n\n# Complete the right_angle_triangle function below.\ndef right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    a = int(input())\n\n    b = int(input())\n\n    c = int(input())\n\n    result = right_angle_triangle(a, b, c)\n\n    print(int(result))\n"}
{"task_id": "HumanEval/158", "solution": "\n\n\n\n#HINT: How to compare two strings? What is the order of comparison?\n\n\n#HINT: How to find the number of unique characters in a string?\n\n\n#HINT: How to find the number of unique characters in a string?\n\n\n#HINT: How to find the number of unique characters in a string?\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/159", "solution": "\n\n# [VAR]\nnumber = int(input())\nneed = int(input())\nremaining = int(input())\n# [/VAR]\n\n# [GLOBAL]\n# [/GLOBAL]\n\n# [LOCAL]\n# [/LOCAL]\n\n# [MAIN]\n# [/MAIN]\n\n# [CHECK]\n# [/CHECK]\n\n# [OUTPUT]\n# [/OUTPUT]\n\n"}
{"task_id": "HumanEval/160", "solution": "\n\n# FUNCTION DEFINITIONS GO BELOW THIS LINE\ndef do_algebra(operator, operand):\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/161", "solution": "\n\n# [SOL]\ns = s[::-1]\nfor i in range(len(s)):\n    if s[i].isalpha():\n        s[i] = s[i].swapcase()\n# [/SOL]\n"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n  \"\"\"Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return None.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  \"\"\"\n  return md5(text).hexdigest()\n\n          \n          \n"}
{"task_id": "HumanEval/163", "solution": "\n\n#Read input\na = int(input(\"Enter first integer: \"))\nb = int(input(\"Enter second integer: \"))\n\n#Print output\nprint(generate_integers(a, b))\n\n#Write program logic\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    if a % 2 != 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result"}
