{"task_id": "HumanEval/0", "solution": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/12", "solution": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    current_longest = strings[0]\n    for string in strings:\n        if len(string) > len(current_longest):\n            current_longest = string\n\n    return current_longest"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    # Iterate over all numbers from n - 1 down to 2\n    for i in range(n - 1, 1, -1):\n        # If i divides n evenly, return i\n        if n % i == 0:\n            return i\n    # If no divisor is found, return 1\n    return 1"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    # Convert the strings to sets of characters and check if they are equal\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    i = 0\n    j = len(q) - 1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    # Calculate the sum of the elements\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight\n    if total_weight <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Count the number of prime hexadecimal digits in a string.\"\"\"\n    prime_digits = set(\"2357ABDEF\")\n    count = 0\n    for digit in num:\n        if digit in prime_digits and is_prime(int(digit, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # convert N to binary and sum the digits\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    \n    # convert the sum of digits to binary\n    binary_sum_str = bin(binary_sum)[2:]\n    \n    return binary_sum_str"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    first_smallest = min(lst[0], lst[1])\n    second_smallest = max(lst[0], lst[1])\n    for num in lst[2:]:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n and i < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    return primes"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # Check if x and y are positive\n    if x <= 0 or y <= 0:\n        return -1\n\n    # Iterate through the range from x to y (inclusive)\n    for num in range(max(x, y), min(x, y), -1):\n        # Check if the number is even\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits_sum = sum(int(digit) for digit in str(abs(num)))\n        if digits_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return min_sum"}
{"task_id": "HumanEval/120", "solution": "import heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Step 1: Initialize a max heap and insert all elements from the input array into the heap.\n    max_heap = []\n    for num in arr:\n        heapq.heappush(max_heap, num)\n    \n    # Step 2: Pop the maximum elements from the heap until we have k elements in the result.\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(max_heap))\n    \n    # Step 3: Return the result.\n    return result"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check if there are any duplicates in the list\n    if len(set(lst)) != len(lst):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(']')\n        elif bracket == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # subtract 2 from n and check if the result is even\n    while n % 2 == 0:\n        n //= 2\n    # if n is 2, then it can be written as the sum of 2, 2, 2, and 2\n    return n == 2"}
{"task_id": "HumanEval/144", "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert x and n into Fraction objects\n    x = Fraction(x)\n    n = Fraction(n)\n    \n    # Multiply x and n\n    result = x * n\n    \n    # Check if the result is a whole number\n    return result.denominator == 1"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()"}
