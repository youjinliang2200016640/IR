{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Set a variable to keep track of whether we find close elements\n    has_close = False\n\n    # Iterate through the list\n    for i in range(len(numbers) - 1):\n        # For each pair of consecutive numbers, compare their difference with the threshold\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            has_close = True\n            break  # If a close pair is found, exit the loop early\n\n    return has_close"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    result = []\n    nesting_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            nesting_level += 1\n            stack.append(nesting_level)\n        elif char == ')':\n            nesting_level -= 1\n            if nesting_level < 0:\n                raise ValueError(\"Invalid parentheses\")\n            result.append(stack.pop())\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n\n    longest_string = max(strings, key=len)  # Find the longest string using the length as the key\n    if len(strings) == 1:  # If there's only one string, return it\n        return longest_string\n    return longest_string  # If there are multiple strings of the same length, return the first one"}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/24", "solution": ""}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    # Remove any non-alphanumeric characters and convert to lowercase\n    text = ''.join(c for c in text if c.isalnum()).lower()\n    \n    # Check if the reversed string is equal to the original\n    return text == text[::-1]"}
{"task_id": "HumanEval/54", "solution": ""}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task: Sum of upper-case characters' ASCII codes in a string\"\"\"\n    upper_chars = [char for char in s if char.isupper()]\n    return sum(ord(char) for char in upper_chars)"}
{"task_id": "HumanEval/72", "solution": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef sum_of_elements(lst):\n    return sum(lst)\n\ndef will_it_fly(q, w):\n    if not is_palindrome(q) or sum_of_elements(q) > w:\n        return False\n    return True"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    primes = {2, 3, 5, 7, 11, 13, 17}  # List of known prime hexadecimal digits\n\n    # Convert the hexadecimal string to decimal and check for each prime digit\n    count = 0\n    decimal_num = int(num, 16)  # Convert hexadecimal to decimal\n    for digit in str(decimal_num):\n        if digit in primes:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert N to binary and sum the digits\n    binary = bin(N)[2:]  # Remove the '0b' prefix and convert to a string\n    sum_digits = sum(int(digit) for digit in binary)\n\n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_digits)[2:]\n\n    return binary_sum"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if not lst:  # Check if the list is empty\n        return None\n    lst.sort()  # Sort the list in ascending order\n    if len(lst) < 2:  # If there's only one element, return None\n        return None\n    return lst[1]  # Return the second element"}
{"task_id": "HumanEval/96", "solution": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Function to count up to the first n prime numbers.\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # Check if both numbers are positive\n    if x <= 0 or y <= 0:\n        return -1\n\n    # Iterate through the range from x to y (inclusive)\n    for num in range(x, y+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Return the biggest even number found\n            return num\n\n    # If no even number is found in the range, return -1\n    return -1"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_digits(num):\n        if num < 0:\n            num = -(-num)  # Convert negative number to its absolute\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    current_sum = 0\n    global_min = float('inf')\n\n    for num in nums:\n        current_sum += num\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum < global_min:\n            global_min = current_sum\n\n    return global_min"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Step 1: Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Step 2: Take the first k elements\n    max_k_numbers = arr[:k]\n    \n    # Step 3: Return the result\n    return max_k_numbers"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:  # Check if a number is greater than the next one\n            return False\n        if lst.count(lst[i]) > 1:  # Check for duplicates\n            return False\n\n    return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char in ['[', '{', '(']:\n            stack.append(char)\n        elif char in [']', '}', ')']:\n            if not stack or stack.pop() != f'[{char}]' if char in '[]' else f'{char}':\n                return False\n\n    return not stack"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    def check_sum(even_numbers):\n        return n == sum(num for num in even_numbers) and len(even_numbers) == 4\n\n    even_numbers = [2, 4, 6, 8]  # Known even numbers that sum up to 16 (n for 8)\n    for num in (2*i for i in range(1, n // 8 + 1) if 2 * i <= n):  # Check for even numbers up to half of n\n        if check_sum(even_numbers + [num]):\n            return True\n\n    return False"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the numerators\n    result_num = x_num * n_num\n\n    # Check if the result is a whole number\n    if result_num // n_den == result_num:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_values = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_string = ''\n    \n    for value, symbol in roman_values.items():\n        while number >= value:\n            roman_string += symbol\n            number -= value\n            \n    return roman_string.lower()"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:  # Check if the text is empty\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))  # Use utf-8 encoding for case-insensitive comparison\n    return md5_hash.hexdigest()  # Return the hexadecimal representation of the hash"}
