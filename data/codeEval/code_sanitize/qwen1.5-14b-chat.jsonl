{"task_id": "HumanEval/0", "solution": "from typing import List, Tuple\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to keep track of the last checked number and if a pair is found\n    last_number = None\n    close_pair_found = False\n    \n    # Iterate through the sorted list\n    for i, num in enumerate(sorted_numbers):\n        # If this is the first number or the difference with the last number is less than the threshold\n        if last_number is None or abs(num - last_number) < threshold:\n            close_pair_found = True\n        # Update the last checked number\n        last_number = num\n    \n    return close_pair_found"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    stack = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                max_levels.append(i - stack.pop())\n            else:\n                max_levels.append(0)  # Account for unmatched closing parenthesis at the end\n\n    return max_levels"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n\n    longest_string = strings[0]  # Set the first string as the longest initially\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n\n    return longest_string"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/24", "solution": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return i\n    # If n is a prime number, the largest divisor is n-1 (since no smaller divisor exists)\n    return n - 1"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            num_str = str(i)\n            for digit in num_str:\n                if digit == '7':\n                    count += 1\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(c.lower() for c in text if c.isalnum())\n    \n    # Compare the cleaned text with its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    # Create a set from the first string, which removes duplicates and makes it easy to check for equality\n    char_set = set(s0)\n    \n    # Iterate through the characters in the second string\n    for char in s1:\n        # If a character from the second string is not in the set, return False\n        if char not in char_set:\n            return False\n        # Remove the character from the set after checking\n        char_set.remove(char)\n    \n    # If we've iterated through all characters in s1 and haven't returned False, the characters are the same\n    return len(char_set) == 0"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is palindromic (balanced)\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Compare the sum with the maximum possible weight\n    if total_weight <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes_in_hex = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    hex_digits = \"0123456789ABCDEF\"\n    count = 0\n    for digit in num:\n        if digit in hex_digits and is_prime(primes_in_hex[hex_digits.index(digit) + 10]):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def sum_of_digits_binary(N):\n    binary_str = bin(N)[2:]  # Convert N to binary (remove '0b' prefix)\n    binary_sum = sum(int(digit) for digit in binary_str)  # Sum the digits in binary\n    return bin(binary_sum)[2:]  # Convert the sum back to binary and return the string\n"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Return the second element (index 1)\n    return lst[1]"}
{"task_id": "HumanEval/96", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1  # If x is greater than y, there's no valid range\n    \n    # Ensure x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0):\n        return -1\n    \n    # Find the biggest even number within the range\n    for num in range(y, x - 1, -1):  # Start from y and decrement until we find an even number\n        if num % 2 == 0:\n            return num  # Return the first even number we find\n    \n    return -1  # If no even number found in the range, return -1"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_of_digits(num):\n        # Convert negative numbers to two's complement to get their signed digits\n        if num < 0:\n            num = abs(num) + (1 << (len(str(abs(num))) * 8 - 1))\n        return sum(int(digit) for digit in str(num))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')  # Initialize min_sum to a very large number\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)  # Update current_sum with the minimum of the current number and the sum including it\n        min_sum = min(min_sum, current_sum)  # Update min_sum if current_sum is smaller\n\n    return min_sum"}
{"task_id": "HumanEval/120", "solution": "import heapq\n\ndef maximum(arr, k):\n    # Create a max heap with the given array\n    max_heap = [-num for num in arr]\n\n    # Pop off the top k elements from the max heap\n    result = [heapq.heappop(max_heap) for _ in range(k)]\n\n    # Since the max heap starts with the maximum values, reverse the list to get the actual maximum values\n    return result[::-1]"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check if the list has more than one duplicate of the same number\n    if len(set(lst)) != len(lst):\n        return False\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    opening_brackets = ['[', '{', '(']\n    closing_brackets = [']', '}', ')']\n\n    for char in string:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or closing_brackets.index(char) != opening_brackets.index(stack.pop()):\n                return False\n\n    return len(stack) == 0  # If there are no opening brackets left, it's a valid nested sequence"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    def is_even_sum(a, b, c, d):\n        return a + b + c + d == n and a % 2 == 0 and b % 2 == 0 and c % 2 == 0 and d % 2 == 0\n\n    for a in range(1, n//2 + 1):  # Start from 1, since we're looking for positive numbers\n        for b in range(a, n//2 + 1):\n            for c in range(b, n//2 + 1):\n                d = n - (a + b + c)  # Calculate the remaining number to reach n\n                if is_even_sum(a, b, c, d):\n                    return True\n    return False"}
{"task_id": "HumanEval/144", "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert strings to fractions\n    x_fraction = Fraction(x.split('/')[0], x.split('/')[1])\n    n_fraction = Fraction(n.split('/')[0], n.split('/')[1])\n\n    # Multiply the fractions\n    result_fraction = x_fraction * n_fraction\n\n    # Check if the result is a whole number\n    whole_number = result_fraction.numerator % result_fraction.denominator == 0\n\n    return whole_number"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', \n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = []\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash"}
