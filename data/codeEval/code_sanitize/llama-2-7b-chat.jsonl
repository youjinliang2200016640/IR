{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for number1, number2 in combinations(numbers, 2):\n        distance = math.sqrt((number1 - number2) ** 2)\n        if distance < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/6", "solution": ""}
{"task_id": "HumanEval/12", "solution": ""}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n.\n    :param n: The number to find the largest divisor for.\n    :return: The largest number that divides n evenly, smaller than n.\n    Examples:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Create a list of numbers from 1 to n\n    numbers = list(range(1, n+1))\n    # Check each number in the list to see if it divides n evenly\n    for number in numbers:\n        if n % number == 0:\n            # If the number divides n evenly, return it\n            return number\n    # If no number divides n evenly, return 1\n    return 1"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    fizz_buzz_count = 0\n    for i in range(0, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz_buzz_count += 1\n    return fizz_buzz_count"}
{"task_id": "HumanEval/42", "solution": ""}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    if text == text[::-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/54", "solution": ""}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Return the sum of the uppercase ASCII codes of the characters in the string.\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if len(q) % 2 != 0:\n        return False\n\n    # Check if the sum of the elements is less than or equal to the maximum weight\n    return sum(q) <= w"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Initialize a list to store the count of prime digits\n    prime_count = []\n    # Iterate through each digit of the input string\n    for i in range(len(num)):\n        # Convert the current digit to a decimal value\n        digit = int(num[i], 16)\n        # Check if the digit is a prime number\n        if digit == 2 or digit == 3 or digit == 5 or digit == 7:\n            # Increment the count of prime digits\n            prime_count.append(1)\n        # If the digit is not a prime number, skip it\n        else:\n            prime_count.append(0)\n    # Return the count of prime digits\n    return sum(prime_count)"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    s = \"\"\n    for i in range(1, int(N ** 0.5) + 1):\n        s += format(2 ** i, \"b\")\n    return s"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Find the 2nd smallest element in the sorted list\n    return lst[1] if len(sorted_lst) > 1 else None"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    # Initialize an empty list to store the prime numbers less than n\n    prime_list = []\n    # Loop until the current number is greater than n\n    for i in range(1, n+1):\n        # Check if the number is prime\n        if is_prime(i):\n            # Add the number to the list if it is prime\n            prime_list.append(i)\n    return prime_list\n\ndef is_prime(n):\n    # Check if the number is less than the square root of n\n    if n <= 1 or n % 2 == 0 or n ** 0.5 <= 1:\n        # Return False\n        return False\n    else:\n        # Loop until the current number is less than the square root of n\n        for i in range(2, int(n ** 0.5) + 1):\n            # Check if the number is divisible by the current number\n            if n % i == 0:\n                # Return False\n                return False\n        # Since the number is not divisible by any number less than its square root, it is prime\n        return True"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if y - x >= y:\n        return -1\n    ceil_y = ceil(y)\n    floor_x = floor(x)\n    return ceil_y"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    # Initialize a counter to count the number of elements with a sum of digits greater than 0\n    return_value = 0\n    # Iterate through the input array\n    for element in arr:\n        # Calculate the sum of digits for the current element\n        digit_sum = 0\n        for digit in str(element):\n            digit_sum += int(digit)\n        # Check if the sum of digits is greater than 0\n        if digit_sum > 0:\n            # Increment the counter\n            return_value += 1\n    # Return the number of elements with a sum of digits greater than 0\n    return return_value"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    n = len(nums)\n    dp = [[0] * (n-1) for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j])\n    return dp[n-1][n-1]\n\ndef minSubArraySum(nums):\n    n = len(nums)\n    k = 1\n    curr_sum = 0\n\n    for i in range(n-k+1):\n\n        for j in range(k, n):\n\n            curr_sum += nums[i+j-k]\n            if curr_sum < min_sum:\n\n                min_sum = curr_sum\n\n    return min_sum"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    result = []\n    for i in range(0, k):\n        if arr[i] > max(result):\n            result.append(arr[i])\n    return result"}
{"task_id": "HumanEval/126", "solution": ""}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    # Initialize an empty stack to keep track of nested brackets\n    stack = []\n\n    # Iterate over the characters in the input string\n    for char in string:\n        # If the character is a bracket, push it onto the stack\n        if char == '[' or char == ']':\n            stack.append(char)\n\n        # If the character is a closing bracket and there is a matching opening bracket in the stack, pop the stack and return True\n        elif char == ']' and stack:\n            if stack.pop() == '[':\n                return True\n\n        # Otherwise, continue checking the next character in the input string\n        else:\n            continue\n\n    # If there are no more closing brackets in the input string, return False\n    return False"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Base case: If n is 4, it can be written as the sum of exactly 4 positive even numbers\n    # So, return False\n    if n == 4:\n        return False\n\n    # Otherwise, check if n can be written as the sum of exactly 4 positive even numbers\n    # Using divide and conquer strategy\n    # Split n into two parts: n // 2 and n % 2\n    # If n // 2 is even, then n can be written as the sum of 4 even numbers\n    # So, return True\n    # Otherwise, return False\n    if n % 2 == 0:\n        return True\n\n    # If n is odd, then it cannot be written as the sum of exactly 4 positive even numbers\n    # So, return False\n    return False"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Step 1: Check if x and n are valid fractions\n    if x.is_integer() or n.is_integer():\n        return True\n    elif x.denominator == 1 or n.denominator == 1:\n        return False\n\n    # Step 2: Simplify x and n if necessary\n    if x.is_ simplified and n.is_simplified:\n        return True\n\n    # Step 3: Check if x and n have a common factor\n    common_factor = simplify_common_factor(x, n)\n    if common_factor > 1:\n        x = x / common_factor\n        n = n / common_factor\n\n    # Step 4: Check if the simplified expression is a whole number\n    simplified_x = simplify(x)\n    if simplified_x == x:\n        return True\n    else:\n        return False\n\n    # Step 5: Return the result\n    return simplified_x * n"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if n == 1 or n == 2:\n        returns y\n    else:\n        return x\n    return y"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    if number <= 100:\n        return roman_numeral(number)\n    elif number >= 100 and number <= 400:\n        return roman_numeral(number // 100) + \"C\" + roman_numeral(number % 100)\n    else:\n        return \"\"\n\ndef roman_numeral(number):\n    if number <= 10:\n        return str(number)\n    elif number >= 20 and number <= 100:\n        return str(number // 10) + \"X\" + str(number % 10)\n    else:\n        return \"\""}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    if text == '':\n        return None\n\n    return hashlib.md5(text).hexdigest()"}
