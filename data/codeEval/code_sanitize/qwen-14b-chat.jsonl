{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    # Create a set to store the already checked numbers, so we don't compare them again\n    checked = set()\n\n    # Iterate over the numbers\n    for i in range(len(numbers)):\n        # If we've already checked this number, skip it\n        if numbers[i] in checked:\n            continue\n\n        # Check if there's any number closer to this one than the threshold\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold and numbers[j] not in checked:\n                return True\n\n        # If we've reached this point, it means we didn't find any number closer to this one\n        # than the threshold, so we add it to the checked set and move on to the next number\n        checked.add(numbers[i])\n\n    # If we've iterated over all the numbers and didn't find any pair closer than the threshold,\n    # return False\n    return False"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(len(levels) + 1)\n        elif char == ')':\n            if not stack:\n                return []\n            level = stack.pop()\n            levels.append(level)\n    return levels"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    \"\"\"\n    Return only positive numbers in the list.\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "solution": ""}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    # If the length of the strings are different, they can't have the same characters\n    if len(s0) != len(s1):\n        return False\n    \n    # Create a set of characters from the first string\n    chars0 = set(s0)\n    \n    # Iterate over the characters in the second string\n    for char in s1:\n        # If the character is not in the set, the strings don't have the same characters\n        if char not in chars0:\n            return False\n        \n        # Remove the character from the set\n        chars0.remove(char)\n    \n    # If we made it through the loop without returning False, the strings have the same characters\n    return True"}
{"task_id": "HumanEval/60", "solution": ""}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if q is a palindrome\n    q.reverse()\n    if q != list(q):\n        return False\n\n    # Check if the sum of q's elements is less than or equal to w\n    if sum(q) > w:\n        return False\n\n    # If both tests pass, return True\n    return True"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary = bin(N)[2:]\n    binary_sum = sum(int(digit) for digit in binary)\n    return binary_sum"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    # If the list is empty or has only one element, return None\n    if len(lst) < 2:\n        return None\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Return the second element in the list\n    return lst[1]"}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # find the largest even integer in the range [x, y]\n    even_nums = [num for num in range(x, y+1) if num % 2 == 0]\n    if not even_nums:\n        return -1\n    # choose the largest even number\n    largest_even = max(even_nums)\n    return largest_even"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/114", "solution": "class Solution:\n    def minSubArraySum(self, nums: List[int]) -> int:\n        min_v = float('inf')\n        max_v = float('-inf')\n        s = 0\n        for i in range(0, len(nums)):\n            s += nums[i]\n            min_v = min(min_v, s)\n            if s > max_v:\n                max_v = s\n        return min_v\ndef minSubArraySum(nums):\n    return Solution().minSubArraySum(nums)"}
{"task_id": "HumanEval/120", "solution": "class Solution:\n    def maximum(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr, reverse=True)\n        return arr[:k]\ndef maximum(arr, k):\n    return Solution().maximum(arr,k)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check that the list has at least two elements\n    if len(lst) < 2:\n        return True\n\n    # Check that the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check that there are no duplicates\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n\n    return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n    \n    # Iterate over all possible combinations of 4 positive even numbers\n    for i in range(2, n//2+1):\n        for j in range(i, n//2+1):\n            for k in range(j, n//2+1):\n                for l in range(k, n//2+1):\n                    # Check if the sum of the 4 numbers is equal to n\n                    if i + j + k + l == n:\n                        return True\n    \n    # If no combination of 4 even numbers sums to n, return False\n    return False"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Convert the fractions to integers by multiplying numerator and denominator by each other\n    # If the result is an integer, return True, otherwise return False\n    return int(x.replace('/', '*')) * int(n.replace('/', '*')) == int(x.replace('/', '')) * int(n.replace('/', ''))"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return md5_hash"}
