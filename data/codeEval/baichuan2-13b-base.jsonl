{"task_id": "HumanEval/0", "solution": " from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    return any(abs(x - y) < threshold for x, y in zip(numbers, numbers[1:]))\n\n"}
{"task_id": "HumanEval/6", "solution": " from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n"}
{"task_id": "HumanEval/12", "solution": " from typing import Any, Callable, Dict, List, Optional, Tuple\n"}
{"task_id": "HumanEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\" "}
{"task_id": "HumanEval/24", "solution": "\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return n//2\n    for i in range(3, n+1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "HumanEval/30", "solution": " \n\ndef get_positive(l):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [val for val in l if val >= 0]\n\n"}
{"task_id": "HumanEval/36", "solution": "\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 3\n\n    if n == 4:\n        return 4\n\n"}
{"task_id": "HumanEval/42", "solution": " \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n"}
{"task_id": "HumanEval/48", "solution": " \n\n\n"}
{"task_id": "HumanEval/54", "solution": " \n\ndef _(s0: str, s1: str):\n    # TODO: Check if the length of the strings are the same.\n    # If not, return False.\n    return len(s0) == len(s1)\n\ndef _same_chars(s0: str, s1: str):\n    # TODO: Check if the words have the same characters.\n    # If not, return False.\n    for c in s0:\n        if c not in s1:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    s = 0\n    for x in range(1, n+1):\n        s += x\n    return s\n\n"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper = []\n\n    # iterate through the string\n    for char in s:\n        # if the char is in uppercase or not in lowercase\n        if char.isupper() or char.islower() == False:\n            # append the char to the list\n            upper.append(char)\n\n    # convert all the chars to ints\n    upper = [int(char) for char in upper]\n\n    # sum all the chars\n    sum = 0\n\n    # iterate through the list\n    for char in upper:\n        # add the current char to the sum\n        sum += char\n\n    # return the sum\n    return sum\n\n\n# +\n# Let's try it on the first example\n\ndigitSum('')\n# -\n\n# Check if the assistant gets it right\ndef digitSumHelper(s):\n    newS = ''\n    # iterate through the string\n    for char in s:\n        # append the char to the list if it is in uppercase or not in lowercase\n        if char.isupper() or char.islower() == False:\n            newS += char\n\n    return newS\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('abAB')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('abcCd')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('helloE')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('woArBld')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('aAaaaXa')\n\n\n# +\n# Check if the assistant gets it right\n\ndigitSumHelper('kMSVXrs')\n\n# -\n\n"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    if sum(q) <= w and q[::-1] == q:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A, B, C, D, E, F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    "}
{"task_id": "HumanEval/84", "solution": " \ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n"}
{"task_id": "HumanEval/90", "solution": " \ndef next_smallest(lst):\n    if lst == []:\n        return None\n    if len(lst) == 1:\n        return None\n    smallest = lst[0]\n    for i in lst:\n        if i != smallest:\n            return smallest\n    return smallest\n\n"}
{"task_id": "HumanEval/96", "solution": " \ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n        for example:\n        count_up_to(5) => [2,3]\n        count_up_to(11) => [2,3,5,7]\n        count_up_to(0) => []\n        count_up_to(20) => [2,3,5,7,11,13,17,19]\n        count_up_to(1) => []\n        count_up_to(18) => [2,3,5,7,11,13,17]\"\"\"\n\n    def is_prime(n):\n        \"\"\"returns true if n is prime\"\"\"\n        if n == 2:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, n, 6):\n            if n % i == 0:\n                return False\n        return True\n    \n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n    return result\n    \n\n"}
{"task_id": "HumanEval/102", "solution": " \n''',\n    )\n\n\ndef test_request_up_vote(bot, bot_message):\n    bot.send_message(bot_message, '''\nA chat between a human and a bot. The human asks the bot to upvote a question. The bot replies with a link to the question.\n"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n"}
{"task_id": "HumanEval/114", "solution": "\n    # sort the array\n    nums.sort()\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum\n\n"}
{"task_id": "HumanEval/120", "solution": " \n\n"}
{"task_id": "HumanEval/126", "solution": " \n\n"}
{"task_id": "HumanEval/132", "solution": " \ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) != 0:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n"}
{"task_id": "HumanEval/144", "solution": " \ndef is_simple(x, n):\n    return str(x * n).split('/')[0] == str(n)\n\n"}
{"task_id": "HumanEval/150", "solution": "\nimport math\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if math.isprime(n):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/156", "solution": "\n# Converts 19 to xix\n# Converts 152 to clii\n# Converts 426 to cdxxvi\n\n"}
{"task_id": "HumanEval/162", "solution": " \ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    import hashlib\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()\n\n"}
