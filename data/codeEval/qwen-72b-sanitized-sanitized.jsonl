{"task_id": "HumanEval/0", "solution": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                if len(stack) > max_depth:\n                    max_depth = len(stack)\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count(\"7\")\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    # Create sets of unique characters for each string\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Check if the sets are equal\n    return set0 == set1"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary = bin(N)[2:]  # Convert N to binary and remove the \"0b\" prefix\n    digit_sum = sum(int(digit) for digit in binary)  # Sum the digits in the binary number\n    return bin(digit_sum)[2:]  # Convert the digit sum to binary and remove the \"0b\" prefix"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = None\n    second_smallest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return the first n prime numbers that are less than n.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n and i < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # Check if x and y are positive integers\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        return \"Both x and y must be positive integers.\"\n    \n    # Check if y is greater than x\n    if y < x:\n        return \"y must be greater than or equal to x.\"\n    \n    # Find the largest even number in the range [x, y]\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    \n    # If no even number was found, return -1\n    return -1"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        # check if the number is negative\n        if num < 0:\n            # convert the first digit to negative\n            num = -int(str(abs(num))[0]) + int(str(abs(num))[1:])\n        # calculate the sum of digits\n        digits_sum = sum(map(int, str(num)))\n        # increment the count if the sum of digits is greater than 0\n        if digits_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    n = len(nums)\n    min_sum = nums[0]\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum = 0\n            for k in range(i, j):\n                sum += nums[k]\n            min_sum = min(min_sum, sum)\n\n    return min_sum"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] < lst[1]\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] >= lst[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0 or stack[-1] != \"[\":\n                return False\n            stack.pop()\n    \n    return len(stack) != 0"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    for i in range(2, n//2 + 1, 2):\n        for j in range(2, n//2 + 1, 2):\n            for k in range(2, n//2 + 1, 2):\n                for l in range(2, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    num = num_x * num_n\n    den = den_x * den_n\n    return num % den == 0"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    lookup = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, symbol in sorted(lookup.items(), reverse=True):\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        md5hash = hashlib.md5()\n        md5hash.update(text.encode('utf-8'))\n        return md5hash.hexdigest()"}
