{"task_id": "HumanEval/0", "solution": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return len(set([abs(num - num2) for num, num2 in zip(numbers, numbers[1:])])) > 1"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def count_parens(string: str) -> int:\n        count = 0\n        for char in string:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count < 0:\n                    return -1\n        return count\n\n    def parse_group(string: str) -> List[int]:\n        result = []\n        for i, char in enumerate(string):\n            if char == '(':\n                result.append(count_parens(string[i+1:]))\n            else:\n                if result and result[-1] > 0:\n                    result[-1] -= 1\n                else:\n                    result.append(count_parens(string[i:]))\n        return result\n\n    groups = paren_string.split(' ')\n    result = []\n    for group in groups:\n        result.extend(parse_group(group))\n    return result"}
{"task_id": "HumanEval/12", "solution": "This is a Python function that takes a list of strings as input and returns the longest string in the list, or None if the list is empty. If there are multiple strings of the same length, the function returns the first one encountered.\nHere's a step-by-step explanation of how the function works:\n\n  1. The function takes a list of strings as its input parameter and assigns it to the variable `strings`.\n  2. The function uses the `len()` function to determine the length of the longest string in the list. It then assigns this length to the variable `longest_length`.\n  3. The function checks if the list is empty using the `len()` function again. If the list is empty, the function returns None.\n  4. If the list is not empty, the function iterates over each string in the list using a for loop.\n  5. For each string, the function checks if its length is greater than `longest_length`. If it is, the function updates `longest_length` to the length of the current string and assigns the current string to the variable `longest_string`.\n  6. After iterating over all the strings, the function returns the value of `longest_string`.\n\nHere's an example of how the function would be used:\n\n```\n>>> longest(['a', 'b', 'c'])\n'a'\n\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n\n>>> longest([])\nNone\n```"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count"}
{"task_id": "HumanEval/24", "solution": "This function takes an integer `n` as input and returns the largest number that divides `n` evenly and is smaller than `n`. Here's how it works:\n\n1. The function initializes a variable `divisor` to 2, as 2 is the smallest possible divisor of any integer.\n2. The function uses a for loop to iterate through all the divisors of `n` by incrementing `divisor` by 1 at a time.\n3. For each divisor `divisor`, the function checks if `divisor` divides `n` evenly by using the modulo operator `%`. If `divisor` divides `n` evenly, the function returns `divisor`.\n4. If the function reaches the end of the loop without finding a divisor that divides `n` evenly, it returns `n`.\n\nHere's an example of how the function works:\n\n```\n>>> largest_divisor(15)\n5\n```\n\nIn this example, `15` has the divisors `1`, `3`, `5`, and `15`. The largest divisor that divides `15` evenly and is smaller than `15` is `5`, so the function returns `5`."}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            count += i % 7 == 7\n        elif i % 11 == 0:\n            count += i % 7 == 0\n        elif i % 13 == 0:\n            count += i % 7 == 0\n    return count"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "solution": "This code defines a function called `is_palindrome` that takes a string `text` as input and returns `True` if the string is a palindrome, and `False` otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. To check if a string is a palindrome, the function compares the characters in the string from both ends towards the middle, and if they are the same, the string is a palindrome. If the characters are different, the string is not a palindrome."}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    return len(s0) == len(s1) and s0.lower() == s1.lower()"}
{"task_id": "HumanEval/60", "solution": "This is a Python function that takes an integer as input and returns the sum of all numbers from 1 to n. Here's how it works:\n\n- First, the function initializes a variable called `total` to 0, which will be used to accumulate the sum of the numbers.\n- Then, it uses a `for` loop to iterate over the numbers from 1 to n (inclusive).\n- For each number in the range, the function adds it to the `total` variable.\n- Finally, the function returns the `total` variable.\n\nHere are some examples of how you can use this function:\n\n```\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n```\n\nIn the first example, the function adds up all the numbers from 1 to 30 (inclusive), which gives a total of 465.\nIn the second example, the function adds up all the numbers from 1 to 100 (inclusive), which gives a total of 5050.\nIn the third example, the function adds up the numbers 1, 2, 3, 4, and 5, which gives a total of 15.\nIn the fourth example, the function adds up the numbers 1, 2, 3, 4, 5, and 6, which gives a total of 15.\nIn the fifth example, the function adds up the number 1, which gives a total of 1."}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of the list is less than or equal to the maximum possible weight\n        return sum(q) <= w\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    num = num.upper()\n    count = 0\n    for i in num:\n        if i in ['2','3','5','7','B','D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "```\nclass Solution:\n     def sumOfDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: str\n         \"\"\"\n         s = bin(N)[2:]\n         res = 0\n         for i in s:\n             res += int(i)\n         return str(res)\n```"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    # Initialize second smallest element as the first element\n    second_smallest = lst[0]\n    \n    # Iterate over the list starting from the second element\n    for num in lst[1:]:\n        # If the current element is smaller than the second smallest element\n        if num < second_smallest:\n            # Update the second smallest element\n            second_smallest = num\n            \n    # Return the second smallest element\n    return second_smallest"}
{"task_id": "HumanEval/96", "solution": "import math\ndef count_up_to(n):\n    prime_numbers = []\n    for i in range(2, int(n**0.5)+1):\n        if all(i % p != 0 for p in prime_numbers):\n            prime_numbers.append(i)\n    return prime_numbers[:n]"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    num = x\n    while num <= y:\n        if num % 2 == 0:\n            return num\n        num += 1\n    return -1"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/114", "solution": "class Solution:\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        res = float('inf')\n        prefix = 0\n        for num in nums:\n            prefix += num\n            res = min(res , prefix)\n        return res"}
{"task_id": "HumanEval/120", "solution": "```\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        if not nums:\n            return []\n        return sorted(nums, reverse=True)[:k]\n```"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n            if top_bracket != bracket:\n                return False\n    return not stack"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(2, int(n/2)+1):\n        for j in range(i, int(n/2)+1):\n            for k in range(j, int(n/2)+1):\n                if k > i:\n                    for l in range(k, n):\n                        if l % 2 == 0:\n                            if i + j + k + l == n:\n                                return True\n    return False"}
{"task_id": "HumanEval/144", "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = int(x_num * n_num / x_den * n_den)\n    return result == x_num * n_num"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x"}
{"task_id": "HumanEval/156", "solution": "```\nclass Solution:\n    def intToMiniRoman(self, num: int) -> str:\n        int_to_mini_roman_map = {\n            1000: 'm',\n            900: 'cm',\n            500: 'd',\n            400: 'cd',\n            100: 'c',\n            90: 'xc',\n            50: 'l',\n            40: 'xl',\n            10: 'x',\n            9: 'ix',\n            5: 'v',\n            4: 'iv',\n            1: 'i'\n        }\n        \n        roman_numeral = ''\n        for value, symbol in int_to_mini_roman_map.items():\n            while num >= value:\n                num -= value\n                roman_numeral += symbol\n        return roman_numeral.lower()\n```"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text: return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
